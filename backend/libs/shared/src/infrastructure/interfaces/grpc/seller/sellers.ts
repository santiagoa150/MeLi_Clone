// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: libs/shared/src/infrastructure/interfaces/grpc/seller/sellers.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "SELLERS_GRPC_PACKAGE";

export interface GetSellerBySellerIdRequest {
  id: string;
}

export interface Seller {
  id: string;
  name: string;
  totalProducts: number;
  totalSales: number;
  customerServiceRating: number;
  onTimeDeliveryRating: number;
  salesPerformanceRating: number;
  imageId: string;
  isOfficial: boolean;
  badges: string[];
}

export const SELLERS_GRPC_PACKAGE_PACKAGE_NAME = "SELLERS_GRPC_PACKAGE";

export interface SellerServicesClient {
  getSellerBySellerId(request: GetSellerBySellerIdRequest): Observable<Seller>;
}

export interface SellerServicesController {
  getSellerBySellerId(request: GetSellerBySellerIdRequest): Observable<Seller>;
}

export function SellerServicesControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getSellerBySellerId"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SellerServices", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SellerServices", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SELLER_SERVICES_SERVICE_NAME = "SellerServices";
